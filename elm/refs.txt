https://fr.wikipedia.org/wiki/Elm_(langage)

https://elm-lang.org/

---
Guide
https://guide.elm-lang.org/

Elm architecture: 

    Model — the state of your application, it's a type (ex. type alias Model = Int), initialized with the 'init' function
    View — a way to turn your state into HTML, it's a view function that takes in the Model as an argument and outputs HTML
    Update — a way to update your state based on messages, it's a function that takes in the Model and a message as arguments and output the new Model. It describes how our Model will change over time.

The main value is special in Elm. 
ex. main =
  Browser.sandbox { init = init, update = update, view = view }
It describes what gets shown on screen. In this case, we are going to initialize our application with the init value, the view function is going to show everything on screen, and user input is going to be fed into the update function. Think of this as the high-level description of our program.

All of our programs were created with Browser.sandbox. We gave an initial Model and describe how to update and view it.

    Wait for user input.
    Send a message to update
    Produce a new Model
    Call view to get new HTML
    Show the new HTML on screen
    Repeat!

https://guide.elm-lang.org/effects/diagrams/sandbox.svg

Types: 

- there are types, type variables, constrained type variables

The full list of constrained type variables is:

    number permits Int and Float
    appendable permits String and List a
    comparable permits Int, Float, Char, String, and lists/tuples of comparable values
    compappend permits String and List comparable

- there are type alias, ex. "type alias MyNameForThisType = ThisType"

- there are ways to create new types, custom types (aka algebraic data types)
ex. type User
  = Regular String Int Location
  | Visitor String
  | Anonymous
  
  Note: Custom types are the most important feature in Elm.

Commands and subscriptions:

Instead of using Browser.sandbox, we can use Browser.element to create programs. 
ex. main =
  Browser.element
    { init = init
    , view = view
    , update = update
    , subscriptions = subscriptions
    }
In that case, we get the ability to issue commands from init and update (we commanded Elm to do specific work immediately). We also get the ability to subscribe to interesting information (We always want to know a piece of information). 

The type annotations for init and update are:
init : () -> (Model, Cmd Msg)
update : Msg -> Model -> (Model, Cmd Msg)

The type annotation for subscription is: 
subscriptions : Model -> Sub Msg

and for view: 
view : Model -> Html Msg


---
Background

https://elm-lang.org/assets/papers/concurrent-frp.pdf

The Elm compiler itself is written entirely in Haskell. Haskell provides many
useful libraries that make this a good choice. Many parsing libraries exist, making
it relatively pleasant to create a lexer and parser. The current version of the compiler
does some mild optimizations – such as constant propagation – before generating
JavaScript. The runtime system for the generated JavaScript is a combination of
HTML, CSS, and JavaScript that handles events and screen updates.
Elm’s website is written primarily in Elm and served using Haskell. Excluding
the code editor, the entire website is written in Elm. Haskell was chosen as the
server framework because it was already the language used to write the compiler.
This allows the server and compiler to interact very cleanly. Although this choice
was initially made for convenience, it has become an important part of writing
code in Elm. Rather than compile an Elm project and serve that code with some
separate framework, the combination compiler/server can compile and serve Elm
files automatically. When an Elm file is changed, the compiler/server automatically
starts serving the new version, making the changes immediately viewable in a web
browser

---
Documentation
https://elm-lang.org/docs/syntax

https://package.elm-lang.org/packages/elm/core/latest/Basics
https://package.elm-lang.org/packages/elm/core/latest/List
https://package.elm-lang.org/packages/elm/core/latest/String

HTML: 
'input' and 'div' are just normal functions. They take (1) a list of attributes and (2) a list of child nodes. 

https://package.elm-lang.org/packages/elm/html/latest/
https://package.elm-lang.org/packages/elm/svg/latest/

https://package.elm-lang.org/packages/elm/parser/latest
https://korban.net/posts/elm/2018-09-07-introduction-elm-parser/

https://faq.elm-community.org/

---
install: 
https://guide.elm-lang.org/install/elm.html
https://github.com/elm/compiler/blob/master/installers/linux/README.md

elm init
elm reactor

# Create an index.html file that you can open in your browser.
elm make src/Main.elm

# Create an optimized JS file to embed in a custom HTML document.
elm make src/Main.elm --optimize --output=elm.js

When you are making your own Elm programs locally, it will probably involve running some commands like this in the terminal:

elm install elm/http
elm install elm/random

That would set up an elm.json file with elm/http and elm/random as dependencies.

elm --help

---
parser

type Inst = Forward Int
ex = Forward 100
write (Forward val) = "Forward " ++ (String.fromInt val)

import Parser exposing (Parser, (|.), (|=), succeed, token, int, spaces)
forward 
  = succeed Forward
    |. token "Forward"
    |. spaces
    |= int
forward = succeed Forward |. token "Forward" |. spaces |= int

> Parser.run forward "Forward  50"
Ok (Forward 50) : Result (List Parser.DeadEnd) Inst
> Parser.run forward " Forward  50"
Err [{ col = 1, problem = Expecting "Forward", row = 1 }]
    : Result (List Parser.DeadEnd) Inst
> Parser.run forward "Forward  50.123"
Err [{ col = 10, problem = ExpectingInt, row = 1 }]
    : Result (List Parser.DeadEnd) Inst


> type Inst = Forward Int | Left Int
> ex = Forward 100
> import Parser exposing (Parser, (|.), (|=), succeed, token, int, spaces)
> forward = succeed Forward |. token "Forward" |. spaces |= int
> left = succeed Left |. token "Left" |. spaces |= int
> inst = Parser.oneOf [forward, left]
> Parser.run inst "Forward  50"
Ok (Forward 50) : Result (List Parser.DeadEnd) Inst
> Parser.run inst "Left 90"
Ok (Left 90) : Result (List Parser.DeadEnd) Inst

see sequence for parsing a list,
see lazy to define recursive parsers (an inst may contain a list of insts in the repeat case) 


---

laziness: 

In elm, a function's value is computed when the last argument is applied. In the example below, the diagnostic from log will be printed when f is invoked with 3 arguments or a curried form of f is applied with the last argument.

import String
import Debug exposing (log)

f a b c = String.join "," (log "Diagnostic" [a,b,c]) -- <function> : String -> String -> String -> String

f2 = f "a1" "b2" -- <function> : String -> String

f "A" "B" "C"
-- Diagnostic: ["A","B","C"]
"A,B,C" : String

f2 "c3"
-- Diagnostic: ["a1","b2","c3"]
"a1,b2,c3" : String

At times you'll want to prevent a function from being applied right away. A typical use in elm is Lazy.lazy which provides an abstraction for controlling when functions are applied.

lazy : (() -> a) -> Lazy a

Lazy computations take a function of one () or Unit type argument. The unit type is conventionally the type of a placeholder argument. In an argument list, the corresponding argument is specified as _, indicating that the value isn't used. The unit value in elm is specified by the special symbol () which can conceptually represent an empty tuple, or a hole. It resembles the empty argument list in C, Javascript and other languages that use parenthesis for function calls, but it's an ordinary value.

In our example, f can be protected from being evaluated immediately with a lambda:

doit f = f () -- <function> : (() -> a) -> a
whatToDo = \_ -> f "a" "b" "c" -- <function> : a -> String
-- f is not evaluated yet

doit whatToDo
-- Diagnostic: ["a","b","c"]
"a,b,c" : String

Function evaluation is delayed any time a function is partially applied.

defer a f = \_ -> f a -- <function> : a -> (a -> b) -> c -> b

delayF = f "a" "b" |> defer "c" -- <function> : a -> String

doit delayF
-- Diagnostic: ["a","b","c"]
"a,b,c" : String

Elm has an always function, which cannot be used to delay evaluation. Because elm evaluates all function arguments regardless of whether and when the result of the function application is used, wrapping a function application in always won't cause a delay, because f is fully applied as a parameter to always.

alwaysF = always (f "a" "b" "c") -- <function> : a -> String
-- Diagnostic: ["a","b","c"] -- Evaluation wasn't delayed.


